{"version":3,"sources":["assets/preloading.png","components/Preloader.js","DataHandling.js","components/CountyMap/County.js","components/CountyMap/CountyMap.js","components/Histogram/Axis.js","components/D3blackbox.js","components/Histogram/Histogram.js","components/Histogram/index.js","components/Meta/USStatesMap.js","components/Meta/Title.js","components/Meta/Description.js","components/Meta/GraphDescription.js","components/MedianLine.js","components/Controls/Toggle.js","components/Controls/ControlRow.js","components/Controls/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Preloader","react_default","a","createElement","className","src","PreloaderImg","style","width","alt","cleanIncomes","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","loadAllData","callback","arguments","length","undefined","_","noop","Promise","all","then","_ref","_ref2","Object","slicedToArray","us","countyNames","medianIncomes","techSalaries","USstateNames","map","_ref3","medianIncomesMap","filter","find","forEach","isNull","usTopoJson","medianIncomesByCounty","groupBy","medianIncomesByUSState","CloroplethColors","reverse","County","nextProps","nextState","_this$props","this","props","zoom","value","_this$props2","geoPath","feature","quantize","color","fill","title","Component","CountyMap","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","projection","scale","range","updateD3","newProps","translate","height","statePaths","topojson","objects","states","features","centroid","values","domain","_this2","statesMesh","b","counties","countyValueMap","fromPairs","transform","concat","x","y","CountyMap_County","key","stroke","strokeLinejoin","D3render","Axis","axis","tickFormat","ticks","data","refs","anchor","_Component","Blackbox","apply","inherits","createClass","ref","Histogram","histogram","widthScale","yScale","thresholds","bins","bars","counts","axisMargin","x1","bottomMargin","bar","percent","x0","Histogram_HistogramBar","makeBar","bind","Histogram_Axis","HistogramBar","label","toFixed","replace","textAnchor","USStatesMap","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","Title","mean","format","d3mean","yearsFragment","USstateFragment","jobTitleFragment","year","filteredBy","toUpperCase","_this$props$filteredB","jobTitle","scaleLinear","d3extent","Description","allData","getFullYear","deviation","d3deviation","UStateFragment","previousYearFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","GraphDescription","float","MedianLine","median","line","medianLabel","Toggle","event","onClick","handleClick","ControlRow","picked","newState","toggleValues","state","mapValues","updateDataFilter","setState","toggles","toggleNames","zipObject","makePick","capitalize","Controls_Toggle","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","_window$location$hash","window","location","hash","split","_window$location$hash2","updateYearFilter","updateUSstateFilter","updateJobTitleFilter","reset","join","reportUpdateUpTheChain","filters","isEqual","years","Set","jobTitles","USstates","Controls_ControlRow","Array","from","App","salariesFilter","techSalariesMap","medianHousehold","salaries","_this$state","changedSalaries","changedFilters","keys","some","k","_this3","components_Preloader","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Meta_Title","Meta_Description","medianIncomesByCount","Meta_GraphDescription","components_CountyMap_CountyMap","fillOpacity","components_Histogram","components_MedianLine","components_Controls","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.978ec15e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloading.0e87f8f1.png\";","import React from 'react'; // needed to make JSX syntax work\r\nimport PreloaderImg from '../assets/preloading.png';\r\n\r\nconst Preloader = () => (\r\n    <div className=\"App container\">\r\n        <h1> The average H1B in tech pays ... </h1>\r\n        <p className=\"lead\">\r\n            Since 2012 the US tech has done this.\r\n            Immigration salaries. <b>This is bold text.</b>\r\n        </p>\r\n        <img src={PreloaderImg} style={{width: '100%'}} alt=\"\" />\r\n        <h2 className=\"text-center\">Loading data ...</h2>\r\n    </div>\r\n);\r\n\r\nexport default Preloader;","import * as d3 from 'd3';\r\nimport _ from 'lodash';\r\n\r\nconst cleanIncomes = (d) => ({\r\n    countyName: d['Name'],\r\n    USstate: d['State'],\r\n    medianIncome: Number(d['Median Household Income']),\r\n    lowerBound: Number(d['90% CI Lower Bound']),\r\n    upperBound: Number(d['90% CI Upper Bound'])\r\n});\r\n\r\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\r\n\r\nconst cleanSalary = (d) => {\r\n    if (!d['base salary'] || Number(d['base salary'] > 300000)) {\r\n        return null;\r\n    }\r\n\r\n    return {\r\n        employer: d.employer,\r\n        submit_date: dateParse(d['submit date']),\r\n        start_date: dateParse(d['start date']),\r\n        case_status: d['case status'],\r\n        job_title: d['job title'],\r\n        clean_job_title: d['job title'],\r\n        base_salary: Number(d['base salary']),\r\n        city: d['city'],\r\n        USstate: d['state'],\r\n        county: d['county'],\r\n        countyID: d['countyID']\r\n    };\r\n}\r\n\r\nconst cleanUSStateName = (d) => ({\r\n    code: d.code,\r\n    id: Number(d.id),\r\n    name: d.name\r\n});\r\n\r\nconst loadAllData = (callback = _.noop) => {\r\n    Promise.all([\r\n        d3.json(\"data/us.json\"),\r\n        d3.csv(\"data/us-county-names-normalized.csv\"),\r\n        d3.csv(\"data/county-median-incomes.csv\", cleanIncomes),\r\n        d3.csv(\"data/h1bs-2012-2016.csv\", cleanSalary),\r\n        d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)\r\n    ]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {\r\n        countyNames = countyNames.map(({id, name}) => ({id: Number(id), name: name}));\r\n        let medianIncomesMap = {};\r\n        medianIncomes.filter(d => _.find(countyNames, {name: d['countyName']}))\r\n                     .forEach((d) => {\r\n                         d['countyID'] = _.find(countyNames, {name: d['countyName']}).id;\r\n                         medianIncomesMap[d.countyID] = d;\r\n                     });\r\n        techSalaries = techSalaries.filter(d => !_.isNull(d));\r\n        callback({\r\n            usTopoJson: us,\r\n            countyNames: countyNames,\r\n            medianIncomes: medianIncomesMap,\r\n            medianIncomesByCounty: _.groupBy(medianIncomes, 'countyName'),\r\n            medianIncomesByUSState: _.groupBy(medianIncomes, 'USstate'),\r\n            techSalaries: techSalaries,\r\n            USstateNames: USstateNames\r\n        });\r\n    });\r\n};\r\n\r\nexport default loadAllData;","import React, {Component} from 'react';\r\nimport _ from 'lodash';\r\n\r\nconst CloroplethColors = _.reverse([\r\n    'rgb(247,251,255)',\r\n    'rgb(222,235,247)',\r\n    'rgb(198,219,239)',\r\n    'rgb(158,202,225)',\r\n    'rgb(107,174,214)',\r\n    'rgb(66,146,198)',\r\n    'rgb(33,113,181)',\r\n    'rgb(8,81,156)',\r\n    'rgb(8,48,107)'\r\n]);\r\n\r\nconst BlankColor = 'rgb(240,240,240)';\r\n\r\nclass County extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const {zoom, value} = this.props;\r\n        return zoom !== nextProps.zoom || value !== nextProps.value;\r\n    }\r\n\r\n    render() {\r\n        const {value, geoPath, feature, quantize} = this.props;\r\n        let color = BlankColor;\r\n        if (value) {\r\n            color = CloroplethColors[quantize(value)];\r\n        }\r\n        return (\r\n            <path d={geoPath(feature)} style={{fill: color}} title={feature.id}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default County;","import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson';\r\nimport _ from 'lodash';\r\n\r\nimport County from './County';\r\n\r\nclass CountyMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.projection = d3.geoAlbersUsa().scale(1280);\r\n        this.geoPath = d3.geoPath().projection(this.projection);\r\n        this.quantize = d3.scaleQuantize().range(d3.range(9));\r\n        this.updateD3(props);\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        this.updateD3(newProps);\r\n    }\r\n\r\n    updateD3(props) {\r\n        this.projection\r\n            .translate([props.width/2, props.height/2])\r\n            .scale(props.width*1.3);\r\n\r\n        if (props.zoom && props.usTopoJson) {\r\n            const us = props.usTopoJson;\r\n            const statePaths = topojson.feature(us, us.objects.states).features;\r\n            const id = _.find(props.USstateNames, {code: props.zoom}).id;\r\n\r\n            this.projection.scale(props.width*4.5);\r\n\r\n            const centroid = this.geoPath.centroid(_.find(statePaths, {id: id}));\r\n            const translate = this.projection.translate();\r\n\r\n            this.projection.translate([\r\n                translate[0] - centroid[0] + props.width/2,\r\n                translate[1] - centroid[1] + props.height/2\r\n            ]);\r\n        }\r\n\r\n        if (props.values) {\r\n            this.quantize.domain([\r\n                d3.quantile(props.values, 0.15, d => d.value),\r\n                d3.quantile(props.values, 0.85, d => d.value)\r\n            ]);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.usTopoJson) {\r\n            return null;\r\n        } \r\n        else {\r\n            const us = this.props.usTopoJson;\r\n            const statesMesh = topojson.mesh(us, us.objects.states, (a,b) => a!==b);\r\n            const counties = topojson.feature(us, us.objects.counties).features;\r\n            const countyValueMap = _.fromPairs(this.props.values.map(d => [d.countyID, d.value]));\r\n\r\n            return (\r\n                <g transform={`translate(${this.props.x}, ${this.props.y})`}>\r\n                    {counties.map((feature) => (\r\n                        <County geoPath={this.geoPath}\r\n                                feature={feature}\r\n                                zoom={this.props.zoom}\r\n                                key={feature.id}\r\n                                quantize={this.quantize}\r\n                                value={countyValueMap[feature.id]} />\r\n                    ))}\r\n                    <path d={this.geoPath(statesMesh)}\r\n                          style={{fill:'none', stroke:'#fff', strokeLinejoin:'round'}}/>\r\n                </g>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default CountyMap;","import * as d3 from 'd3';\r\nimport D3blackbox from '../D3blackbox';\r\n\r\nconst Axis = D3blackbox(function() {\r\n    const axis = d3.axisLeft()\r\n                   .tickFormat(d => `${d3.format(\".2s\")(d)}`)\r\n                   .scale(this.props.scale)\r\n                   .ticks(this.props.data.length);\r\n\r\n    d3.select(this.refs.anchor).call(axis);\r\n})\r\n\r\nexport default Axis;","import React, {Component} from 'react';\r\n\r\nexport default function D3blackbox(D3render) {\r\n    return class Blackbox extends Component {\r\n        componentDidMount() {D3render.call(this);}\r\n        componentDidUpdate() {D3render.call(this);}\r\n        render() {\r\n            const {x,y} = this.props;\r\n            return <g transform={`translate(${x},${y})`} ref=\"anchor\" />;\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nimport Axis from './Axis';\r\n\r\nclass Histogram extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.histogram = d3.histogram();\r\n        this.widthScale = d3.scaleLinear();\r\n        this.yScale = d3.scaleLinear();\r\n\r\n        this.updateD3(props);\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        this.updateD3(newProps);\r\n    }\r\n\r\n    updateD3(props) {\r\n        this.histogram.thresholds(props.bins)\r\n                      .value(props.value);\r\n        const bars = this.histogram(props.data);\r\n        const counts = bars.map((d) => d.length);\r\n\r\n        this.widthScale.domain([d3.min(counts), d3.max(counts)])\r\n                       .range([0, props.width - props.axisMargin]);\r\n\r\n        this.yScale.domain([0, d3.max(bars, (d) => d.x1)])\r\n                   .range([0, props.height - props.y - props.bottomMargin]);\r\n    }\r\n\r\n    makeBar(bar) {\r\n        let percent = bar.length/this.props.data.length*100;\r\n        let props = {\r\n            percent: percent,\r\n            x: this.props.axisMargin,\r\n            y: this.yScale(bar.x0),\r\n            width: this.widthScale(bar.length),\r\n            height: this.yScale(bar.x1 - bar.x0),\r\n            key: \"histogram-bar-\" + bar.x0\r\n        }\r\n        return (\r\n            <HistogramBar {...props} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const translate = `translate(${this.props.x}, ${this.props.y})`;\r\n        const bars = this.histogram(this.props.data);\r\n        return (\r\n            <g className=\"histogram\" transform={translate}>\r\n                <g className=\"bars\">\r\n                    {bars.map(this.makeBar.bind(this))}\r\n                </g>\r\n                <Axis x={this.props.axisMargin - 3}\r\n                      y={0}\r\n                      data={bars}\r\n                      scale={this.yScale} />\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nconst HistogramBar = ({percent, x, y, width, height}) => {\r\n    let translate = `translate(${x}, ${y})`;\r\n    let label = percent.toFixed(0) + '%';\r\n    if (percent < 1) {\r\n        label = percent.toFixed(2) + \"%\";\r\n    }\r\n    if (width < 20) {\r\n        label = label.replace(\"%\", \"\");\r\n    }\r\n    if (width < 10) {\r\n        label = \"\";\r\n    }\r\n\r\n    return (\r\n        <g transform={translate} className=\"bar\">\r\n            <rect width={width} height={height-2} transform=\"translate(0,1)\">\r\n            </rect>\r\n            <text textAnchor=\"end\" x={width-5} y={height/2+3}>\r\n                {label}\r\n            </text>\r\n        </g>\r\n    );\r\n}\r\n\r\nexport default Histogram;","import Histogram from './Histogram';\r\n\r\nexport default Histogram;","export default {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AS\": \"American Samoa\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FM\": \"Federated States Of Micronesia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"GU\": \"Guam\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MH\": \"Marshall Islands\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"PR\": \"Puerto Rico\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n};\n","import React, {Component} from 'react';\r\nimport {scaleLinear} from 'd3-scale';\r\nimport {mean as d3mean, extent as d3extent} from 'd3-array';\r\n\r\nimport USStatesMap from './USStatesMap';\r\n\r\nclass Title extends Component {\r\n    get yearsFragment() {\r\n        const year = this.props.filteredBy.year;\r\n        return year === '*' ? \"\" : `in ${year}`;\r\n    }\r\n\r\n    get USstateFragment() {\r\n        const USstate = this.props.filteredBy.USstate;\r\n        return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\r\n    }\r\n\r\n    get jobTitleFragment() {\r\n        const {jobTitle, year} = this.props.filteredBy;\r\n        let title = \"\";\r\n\r\n        if (jobTitle === '*') {\r\n            if (year === '*') {\r\n                title = \"The average H1B in tech pays\";\r\n            }\r\n            else {\r\n                title = \"The average tech HIB paid\";\r\n            }\r\n        }\r\n        else {\r\n            title = `Software ${jobTitle}s on an H1B`;\r\n            if (year === '*') {\r\n                title += \" make\";\r\n            }\r\n            else {\r\n                title += \" made\";\r\n            }\r\n        }\r\n\r\n        return title;\r\n    }\r\n\r\n    get format() {\r\n        return scaleLinear()\r\n               .domain(d3extent(this.props.data, d => d.base_salary))\r\n               .tickFormat();\r\n    }\r\n\r\n    render() {\r\n        const mean = this.format(d3mean(this.props.data, d => d.base_salary));\r\n        let title;\r\n        if (this.yearsFragment && this.USstateFragment) {\r\n            title = (\r\n                <h2>\r\n                    In {this.USstateFragment}, {this.jobTitleFragment} ${mean}/year {this.yearsFragment}\r\n                </h2>\r\n            );\r\n        }\r\n        else {\r\n            title = (\r\n                <h2>\r\n                    {this.jobTitleFragment} ${mean}/year {this.USstateFragment ? `in ${this.USstateFragment}`: ''} {this.yearsFragment}\r\n                </h2>\r\n            );\r\n        }\r\n        return title;\r\n    }\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { mean as d3mean, extent as d3extent, deviation as d3deviation } from 'd3-array';\r\n\r\nimport USStatesMap from './USStatesMap';\r\n\r\nclass Description extends Component {\r\n\r\n    allDataForYear(year, data = this.props.allData) {\r\n        return data.filter(d => d.submit_date.getFullYear() === year);\r\n    }\r\n\r\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\r\n        return data.filter(d => d.clean_job_title === jobTitle);\r\n    }\r\n\r\n    allDataForUSstate(USstate, data = this.props.allData) {\r\n        return data.filter(d => d.USstate === USstate);\r\n    }\r\n\r\n    get yearsFragment() {\r\n        const year = this.props.filteredBy.year;\r\n\r\n        return year === '*' ? \"\" : `In ${year}`;\r\n    }\r\n\r\n    get USstateFragment() {\r\n        const USstate = this.props.filteredBy.USstate;\r\n\r\n        return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\r\n    }\r\n\r\n    get previousYearFragment() {\r\n        const year = this.props.filteredBy.year;\r\n\r\n        let fragment;\r\n\r\n        if (year === '*') {\r\n            fragment = \"\";\r\n        } else if (year === 2012) {\r\n            fragment = \"\";\r\n        } else {\r\n            const { USstate, jobTitle } = this.props.filteredBy;\r\n            let lastYear = this.allDataForYear(year - 1);\r\n\r\n\r\n            if (jobTitle !== '*') {\r\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\r\n            }\r\n\r\n            if (USstate !== '*') {\r\n                lastYear = this.allDataForUSstate(USstate, lastYear);\r\n            }\r\n\r\n            if (this.props.data.length / lastYear.length > 2) {\r\n                fragment = \", \" + (this.props.data.length / lastYear.length).toFixed() + \" times more than the year before\";\r\n            } else {\r\n                const percent = ((1 - lastYear.length / this.props.data.length) * 100).toFixed();\r\n\r\n                fragment = \", \" + Math.abs(percent) + \"% \" + (percent > 0 ? \"more\" : \"less\") + \" than the year before\";\r\n            }\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    get jobTitleFragment() {\r\n        const jobTitle = this.props.filteredBy.jobTitle;\r\n        let fragment;\r\n\r\n        if (jobTitle === '*') {\r\n            fragment = \"H1B work visas\";\r\n        } else {\r\n            if (jobTitle === \"other\") {\r\n                fragment = \"H1B work visas\";\r\n            } else {\r\n                fragment = `H1B work visas for software ${jobTitle}s`;\r\n            }\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    get format() {\r\n        return scaleLinear()\r\n            .domain(d3extent(this.props.data, d => d.base_salary))\r\n            .tickFormat();\r\n    }\r\n\r\n\r\n    render() {\r\n        const format = this.format,\r\n            mean = d3mean(this.props.data, d => d.base_salary),\r\n            deviation = d3deviation(this.props.data, d => d.base_salary);\r\n\r\n        return (\r\n            <p className=\"lead\">\r\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the {this.UStateFragment} tech industry {this.yearsFragment ? \"sponsored\" : \"has sponsored\"} <b>{format(this.props.data.length)} {this.jobTitleFragment}</b>{this.previousYearFragment}. Most of them paid <b>${format(mean - deviation)} to ${format(mean + deviation)}</b> per year.\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Description;","import React, { Component } from 'react';\r\n\r\nclass GraphDescription extends Component {\r\n    get jobTitleFragment() {\r\n        const { jobTitle } = this.props.filteredBy;\r\n        let title;\r\n\r\n        if (jobTitle === '*') {\r\n            title = 'in tech';\r\n        }else{\r\n            if (jobTitle === \"other\") {\r\n                title = \"in tech\";\r\n            }else{\r\n                title = `a Software ${jobTitle}`;\r\n            }\r\n        }\r\n\r\n        return title;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"col-md-6 text-center\" style={{float: \"left\"}}>\r\n                    <h3>Best places to be {this.jobTitleFragment}</h3>\r\n                    <small>Darker color means bigger difference between median household salary<br/>and individual tech salary. Gray means lack of tech salary data.</small>\r\n                </div>\r\n                <div className=\"col-md-6 text-center\" style={{float: \"left\"}}>\r\n                    <h3>Salary distribution</h3>\r\n                    <small>Histogram shows tech salary distribution compared to median household income, which is a good proxy for cost of living.</small>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GraphDescription;","import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass MedianLine extends Component {\r\n    componentWillMount() {\r\n        this.yScale = d3.scaleLinear();\r\n        this.updateD3(this.props);\r\n    }\r\n    \r\n    componentWillReceiveProps(newProps) {\r\n        this.updateD3(newProps);\r\n    }\r\n\r\n    updateD3(props) {\r\n        this.yScale\r\n            .domain([0, d3.max(props.data, props.value)])\r\n            .range([0, props.height - props.y - props.bottomMargin]);\r\n    }\r\n\r\n    render() {\r\n        const median = this.props.median || d3.median(this.props.data, this.props.value);\r\n        const line = d3.line()([[0, 5], [this.props.width, 5]]);\r\n        const tickFormat = this.yScale.tickFormat();\r\n        const translate = `translate(${this.props.x}, ${this.yScale(median)})`;\r\n        const medianLabel = `Median Household: $${tickFormat(median)}`;\r\n\r\n        return (\r\n            <g className=\"mean\" transform={translate}>\r\n                <text x={this.props.width - 5} y=\"0\" textAnchor=\"end\">\r\n                    {medianLabel}\r\n                </text>\r\n                <path d={line}></path>\r\n            </g>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MedianLine;","import React, { Component } from 'react';\r\n\r\nclass Toggle extends Component {\r\n    handleClick(event) {\r\n        this.props.onClick(this.props.name, !this.props.value);\r\n    }\r\n\r\n    render() {\r\n        let className = \"btn btn-default\";\r\n\r\n        if (this.props.value) {\r\n            className += \" btn-primary\";\r\n        }\r\n\r\n        return (\r\n            <button className={className} onClick={this.handleClick.bind(this)}>\r\n                {this.props.label}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toggle;\r\n","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport Toggle from './Toggle';\r\n\r\nclass ControlRow extends Component {\r\n    makePick(picked, newState) {\r\n        let toggleValues = this.state.toggleValues;\r\n\r\n        toggleValues = _.mapValues(toggleValues,\r\n            (value, key) => newState && key == picked); // eslint-disable-line\r\n\r\n        // if newState is false, we want to reset\r\n        this.props.updateDataFilter(picked, !newState);\r\n\r\n        this.setState({ toggleValues: toggleValues });\r\n    }\r\n\r\n    componentWillMount() {\r\n        let toggles = this.props.toggleNames,\r\n            toggleValues = _.zipObject(toggles,\r\n                toggles.map((name) => name === this.props.picked));\r\n\r\n        this.setState({ toggleValues: toggleValues });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.picked !== nextProps.picked) {\r\n            this.makePick(nextProps.picked, true);\r\n        }\r\n    }\r\n\r\n    _addToggle(name) {\r\n        let key = `toggle-${name}`,\r\n            label = name;\r\n\r\n        if (this.props.capitalize) {\r\n            label = label.toUpperCase();\r\n        }\r\n\r\n        return (\r\n            <Toggle label={label}\r\n                name={name}\r\n                key={key}\r\n                value={this.state.toggleValues[name]}\r\n                onClick={this.makePick.bind(this)} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row col-md-12\">\r\n                {this.props.toggleNames\r\n                    .map(name => this._addToggle(name))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlRow;","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport ControlRow from './ControlRow';\r\n\r\nclass Controls extends Component {\r\n    state = {\r\n        yearFilter: () => true,\r\n        jobTitleFilter: () => true,\r\n        USstateFilter: () => true,\r\n        year: '*',\r\n        USstate: '*',\r\n        jobTitle: '*'\r\n    };\r\n\r\n    componentDidMount() {\r\n        let [year, USstate, jobTitle] = window.location.hash.replace('#', '').split(\"-\");\r\n\r\n        if (year !== '*' && year) {\r\n            this.updateYearFilter(Number(year));\r\n        }\r\n        if (USstate !== '*' && USstate) {\r\n            this.updateUSstateFilter(USstate);\r\n        }\r\n        if (jobTitle !== '*' && jobTitle) {\r\n            this.updateJobTitleFilter(jobTitle);\r\n        }\r\n    }\r\n\r\n    updateYearFilter(year, reset) {\r\n        let filter = (d) => d.submit_date.getFullYear() === year;\r\n\r\n        if (reset || !year) {\r\n            filter = () => true;\r\n            year = '*';\r\n        }\r\n\r\n        this.setState({\r\n            yearFilter: filter,\r\n            year: year\r\n        });\r\n    }\r\n\r\n    updateJobTitleFilter(title, reset) {\r\n        let filter = (d) => d.clean_job_title === title;\r\n\r\n        if (reset || !title) {\r\n            filter = () => true;\r\n            title = '*';\r\n        }\r\n\r\n        this.setState({\r\n            jobTitleFilter: filter,\r\n            jobTitle: title\r\n        });\r\n    }\r\n\r\n    updateUSstateFilter(USstate, reset) {\r\n        let filter = (d) => d.USstate === USstate;\r\n\r\n        if (reset || !USstate) {\r\n            filter = () => true;\r\n            USstate = '*';\r\n        }\r\n\r\n        this.setState({\r\n            USstateFilter: filter,\r\n            USstate: USstate\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        window.location.hash = [this.state.year || '*',\r\n        this.state.USstate || '*',\r\n        this.state.jobTitle || '*'].join(\"-\");\r\n\r\n        this.reportUpdateUpTheChain();\r\n    }\r\n\r\n    reportUpdateUpTheChain() {\r\n        this.props.updateDataFilter(\r\n            ((filters) => {\r\n                return (d) => filters.yearFilter(d)\r\n                    && filters.jobTitleFilter(d)\r\n                    && filters.USstateFilter(d);\r\n            })(this.state),\r\n            {\r\n                USstate: this.state.USstate,\r\n                year: this.state.year,\r\n                jobTitle: this.state.jobTitle\r\n            }\r\n        );\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !_.isEqual(this.state, nextState);\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data;\r\n\r\n        const years = new Set(data.map(d => d.submit_date.getFullYear())),\r\n            jobTitles = new Set(data.map(d => d.clean_job_title)),\r\n            USstates = new Set(data.map(d => d.USstate));\r\n\r\n        return (\r\n            <div>\r\n                <ControlRow data={data}\r\n                    toggleNames={Array.from(years.values())}\r\n                    picked={this.state.year}\r\n                    updateDataFilter={this.updateYearFilter.bind(this)} />\r\n\r\n                <ControlRow data={data}\r\n                    toggleNames={Array.from(jobTitles.values())}\r\n                    picked={this.state.jobTitle}\r\n                    updateDataFilter={this.updateJobTitleFilter.bind(this)} />\r\n\r\n                <ControlRow data={data}\r\n                    toggleNames={Array.from(USstates.values())}\r\n                    picked={this.state.USstate}\r\n                    updateDataFilter={this.updateUSstateFilter.bind(this)}\r\n                    capitalize=\"true\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controls;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport './App.css';\n\nimport Preloader from './components/Preloader';\nimport loadAllData from './DataHandling';\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport { Title, Description, GraphDescription } from './components/Meta';\nimport MedianLine from './components/MedianLine';\nimport Controls from './components/Controls';\n\nclass App extends Component {\n  state = {\n    techSalaries: [],\n    countyNames: [],\n    medianIncomes: [],\n    salariesFilter: () => true,\n    filteredBy: {\n      USstate: '*',\n      year: '*',\n      jobTitle: '*'\n    }\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id];\n    const salaries = techSalariesMap[county.name];\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { techSalaries, filteredBy } = this.state;\n\n    const changedSalaries = (techSalaries && techSalaries.length) !== (nextState.techSalaries && nextState.techSalaries.length);\n\n    const changedFilters = Object.keys(filteredBy).some(\n      k => filteredBy[k] !== nextState.filteredBy[k]\n    );\n\n    return changedSalaries || changedFilters;\n  }\n\n  updateDataFilter(filter, filteredBy) {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    });\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return (\n        <Preloader />\n      );\n    }\n\n    const filteredSalaries = this.state.techSalaries.filter(this.state.salariesFilter);\n    const filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID');\n    const countyValues = this.state.countyNames.map(county => this.countyValue(county, filteredSalariesMap)).filter(d => !_.isNull(d));\n\n    let zoom = null;\n    let medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome;\n    if (this.state.filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(this.state.medianIncomesByUSState[zoom], d => d.medianIncome);\n    }\n\n    return (\n      <div className=\"App container\">\n        <Title data={filteredSalaries} filteredBy={this.state.filteredBy} />\n        <Description data={filteredSalaries}\n          allData={this.state.techSalaries}\n          medianIncomesByCount={this.state.medianIncomesByCount}\n          filteredBy={this.state.filteredBy} />\n        <GraphDescription data={filteredSalaries}\n          filteredBy={this.state.filteredBy} />\n        <svg width=\"1100\" height=\"500\">\n          <CountyMap usTopoJson={this.state.usTopoJson}\n            USstateNames={this.state.USstateNames}\n            values={countyValues}\n            x={0}\n            y={0}\n            width={500}\n            height={500}\n            zoom={zoom} />\n          <rect x=\"500\" y=\"0\" width=\"600\" height=\"500\" style={{ fill: 'white', fillOpacity:1}} />\n          <Histogram bins={10}\n            width={500}\n            height={500}\n            x=\"500\"\n            y=\"10\"\n            data={filteredSalaries}\n            axisMargin={83}\n            bottomMargin={5}\n            value={d => d.base_salary} />\n          <MedianLine data={filteredSalaries}\n            x={500}\n            y={10}\n            width={600}\n            height={500}\n            bottomMargin={5}\n            median={medianHousehold}\n            value={d => d.base_salary} />\n        </svg>\n        <Controls data={this.state.techSalaries}\n          updateDataFilter={this.updateDataFilter.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}