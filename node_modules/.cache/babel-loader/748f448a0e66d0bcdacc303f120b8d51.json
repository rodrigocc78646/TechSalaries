{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\components\\\\Controls\\\\ControlRow.js\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport Toggle from './Toggle';\n\nclass ControlRow extends Component {\n  componentWillMount() {\n    let toggles = this.props.toggleNames;\n\n    let toggleValues = _.zipObject(toggles, toggles.map(name => name === this.props.picked));\n\n    this.setState({\n      toggleValues: toggleValues\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.picked !== nextProps.picked) {\n      this.makePick(nextProps.picked, true);\n    }\n  }\n\n  makePick(picked, newState) {\n    let toggleValues = this.state.toggleValues;\n    toggleValues = _.mapValues(toggleValues, (value, key) => newState && key == picked); // if newState is false, we want to reset\n\n    this.props.updateDataFilter(picked, !newState);\n    this.setState({\n      toggleValues: toggleValues\n    });\n  }\n\n  _addToggle(name) {\n    let key = \"toggle-\".concat(name);\n    let label = name;\n\n    if (this.props.capitalize) {\n      label = label.toUpperCase();\n    }\n\n    return React.createElement(Toggle, {\n      label: label,\n      name: name,\n      key: key,\n      value: this.state.toggleValues[name],\n      onClick: this.makePick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.props.toggleNames.map(name => this._addToggle(name))));\n  }\n\n}\n\nexport default ControlRow;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\components\\Controls\\ControlRow.js"],"names":["React","Component","_","Toggle","ControlRow","componentWillMount","toggles","props","toggleNames","toggleValues","zipObject","map","name","picked","setState","componentWillReceiveProps","nextProps","makePick","newState","state","mapValues","value","key","updateDataFilter","_addToggle","label","capitalize","toUpperCase","bind","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAC/BI,EAAAA,kBAAkB,GAAG;AACjB,QAAIC,OAAO,GAAG,KAAKC,KAAL,CAAWC,WAAzB;;AACA,QAAIC,YAAY,GAAGP,CAAC,CAACQ,SAAF,CAAYJ,OAAZ,EAAqBA,OAAO,CAACK,GAAR,CAAaC,IAAD,IAAUA,IAAI,KAAK,KAAKL,KAAL,CAAWM,MAA1C,CAArB,CAAnB;;AAEA,SAAKC,QAAL,CAAc;AAAEL,MAAAA,YAAY,EAAEA;AAAhB,KAAd;AACH;;AAEDM,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACjC,QAAI,KAAKT,KAAL,CAAWM,MAAX,KAAsBG,SAAS,CAACH,MAApC,EAA4C;AACxC,WAAKI,QAAL,CAAcD,SAAS,CAACH,MAAxB,EAAgC,IAAhC;AACH;AACJ;;AAEDI,EAAAA,QAAQ,CAACJ,MAAD,EAASK,QAAT,EAAmB;AACvB,QAAIT,YAAY,GAAG,KAAKU,KAAL,CAAWV,YAA9B;AACAA,IAAAA,YAAY,GAAGP,CAAC,CAACkB,SAAF,CAAYX,YAAZ,EAA0B,CAACY,KAAD,EAAQC,GAAR,KAAgBJ,QAAQ,IAAII,GAAG,IAAIT,MAA7D,CAAf,CAFuB,CAIvB;;AACA,SAAKN,KAAL,CAAWgB,gBAAX,CAA4BV,MAA5B,EAAoC,CAACK,QAArC;AAEA,SAAKJ,QAAL,CAAc;AAAEL,MAAAA,YAAY,EAAEA;AAAhB,KAAd;AACH;;AAEDe,EAAAA,UAAU,CAACZ,IAAD,EAAO;AACb,QAAIU,GAAG,oBAAaV,IAAb,CAAP;AACA,QAAIa,KAAK,GAAGb,IAAZ;;AAEA,QAAI,KAAKL,KAAL,CAAWmB,UAAf,EAA2B;AACvBD,MAAAA,KAAK,GAAGA,KAAK,CAACE,WAAN,EAAR;AACH;;AAED,WACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEF,KAAf;AACQ,MAAA,IAAI,EAAEb,IADd;AAEQ,MAAA,GAAG,EAAEU,GAFb;AAGQ,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWV,YAAX,CAAwBG,IAAxB,CAHf;AAIQ,MAAA,OAAO,EAAE,KAAKK,QAAL,CAAcW,IAAd,CAAmB,IAAnB,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKtB,KAAL,CAAWC,WAAX,CAAuBG,GAAvB,CAA2BC,IAAI,IAAI,KAAKY,UAAL,CAAgBZ,IAAhB,CAAnC,CADL,CADJ,CADJ;AAOH;;AAjD8B;;AAoDnC,eAAeR,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport Toggle from './Toggle';\r\n\r\nclass ControlRow extends Component {\r\n    componentWillMount() {\r\n        let toggles = this.props.toggleNames;\r\n        let toggleValues = _.zipObject(toggles, toggles.map((name) => name === this.props.picked));\r\n\r\n        this.setState({ toggleValues: toggleValues })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.picked !== nextProps.picked) {\r\n            this.makePick(nextProps.picked, true);\r\n        }\r\n    }\r\n\r\n    makePick(picked, newState) {\r\n        let toggleValues = this.state.toggleValues;\r\n        toggleValues = _.mapValues(toggleValues, (value, key) => newState && key == picked);\r\n\r\n        // if newState is false, we want to reset\r\n        this.props.updateDataFilter(picked, !newState);\r\n\r\n        this.setState({ toggleValues: toggleValues });\r\n    }\r\n\r\n    _addToggle(name) {\r\n        let key = `toggle-${name}`;\r\n        let label = name;\r\n\r\n        if (this.props.capitalize) {\r\n            label = label.toUpperCase();\r\n        }\r\n\r\n        return(\r\n            <Toggle label={label}\r\n                    name={name} \r\n                    key={key} \r\n                    value={this.state.toggleValues[name]} \r\n                    onClick={this.makePick.bind(this)} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    {this.props.toggleNames.map(name => this._addToggle(name))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlRow;"]},"metadata":{},"sourceType":"module"}