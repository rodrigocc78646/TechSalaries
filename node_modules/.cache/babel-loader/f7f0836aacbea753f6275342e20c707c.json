{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\components\\\\Controls\\\\ControlRow.js\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport Toggle from './Toggle';\n\nclass ControlRow extends Component {\n  makePick(picked, newState) {\n    let toggleValues = this.state.toggleValues;\n    toggleValues = _.mapValues(toggleValues, (value, key) => newState && key == picked); // eslint-disable-line\n    // if newState is false, we want to reset\n\n    this.props.updateDataFilter(picked, !newState);\n    this.setState({\n      toggleValues: toggleValues\n    });\n  }\n\n  componentWillMount() {\n    let toggles = this.props.toggleNames,\n        toggleValues = _.zipObject(toggles, toggles.map(name => name === this.props.picked));\n\n    this.setState({\n      toggleValues: toggleValues\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.picked !== nextProps.picked) {\n      this.makePick(nextProps.picked, true);\n    }\n  }\n\n  _addToggle(name) {\n    let key = \"toggle-\".concat(name),\n        label = name;\n\n    if (this.props.capitalize) {\n      label = label.toUpperCase();\n    }\n\n    return React.createElement(Toggle, {\n      label: label,\n      name: name,\n      key: key,\n      value: this.state.toggleValues[name],\n      onClick: this.makePick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.props.toggleNames.map(name => this._addToggle(name)));\n  }\n\n}\n\nexport default ControlRow;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\components\\Controls\\ControlRow.js"],"names":["React","Component","_","Toggle","ControlRow","makePick","picked","newState","toggleValues","state","mapValues","value","key","props","updateDataFilter","setState","componentWillMount","toggles","toggleNames","zipObject","map","name","componentWillReceiveProps","nextProps","_addToggle","label","capitalize","toUpperCase","bind","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAC/BI,EAAAA,QAAQ,CAACC,MAAD,EAASC,QAAT,EAAmB;AACvB,QAAIC,YAAY,GAAG,KAAKC,KAAL,CAAWD,YAA9B;AAEAA,IAAAA,YAAY,GAAGN,CAAC,CAACQ,SAAF,CAAYF,YAAZ,EACX,CAACG,KAAD,EAAQC,GAAR,KAAgBL,QAAQ,IAAIK,GAAG,IAAIN,MADxB,CAAf,CAHuB,CAIyB;AAEhD;;AACA,SAAKO,KAAL,CAAWC,gBAAX,CAA4BR,MAA5B,EAAoC,CAACC,QAArC;AAEA,SAAKQ,QAAL,CAAc;AAAEP,MAAAA,YAAY,EAAEA;AAAhB,KAAd;AACH;;AAEDQ,EAAAA,kBAAkB,GAAG;AACjB,QAAIC,OAAO,GAAG,KAAKJ,KAAL,CAAWK,WAAzB;AAAA,QACIV,YAAY,GAAGN,CAAC,CAACiB,SAAF,CAAYF,OAAZ,EACXA,OAAO,CAACG,GAAR,CAAaC,IAAD,IAAUA,IAAI,KAAK,KAAKR,KAAL,CAAWP,MAA1C,CADW,CADnB;;AAIA,SAAKS,QAAL,CAAc;AAAEP,MAAAA,YAAY,EAAEA;AAAhB,KAAd;AACH;;AAEDc,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACjC,QAAI,KAAKV,KAAL,CAAWP,MAAX,KAAsBiB,SAAS,CAACjB,MAApC,EAA4C;AACxC,WAAKD,QAAL,CAAckB,SAAS,CAACjB,MAAxB,EAAgC,IAAhC;AACH;AACJ;;AAEDkB,EAAAA,UAAU,CAACH,IAAD,EAAO;AACb,QAAIT,GAAG,oBAAaS,IAAb,CAAP;AAAA,QACII,KAAK,GAAGJ,IADZ;;AAGA,QAAI,KAAKR,KAAL,CAAWa,UAAf,EAA2B;AACvBD,MAAAA,KAAK,GAAGA,KAAK,CAACE,WAAN,EAAR;AACH;;AAED,WACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEF,KAAf;AACI,MAAA,IAAI,EAAEJ,IADV;AAEI,MAAA,GAAG,EAAET,GAFT;AAGI,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWD,YAAX,CAAwBa,IAAxB,CAHX;AAII,MAAA,OAAO,EAAE,KAAKhB,QAAL,CAAcuB,IAAd,CAAmB,IAAnB,CAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKhB,KAAL,CAAWK,WAAX,CACIE,GADJ,CACQC,IAAI,IAAI,KAAKG,UAAL,CAAgBH,IAAhB,CADhB,CADL,CADJ;AAMH;;AAnD8B;;AAsDnC,eAAejB,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport Toggle from './Toggle';\r\n\r\nclass ControlRow extends Component {\r\n    makePick(picked, newState) {\r\n        let toggleValues = this.state.toggleValues;\r\n\r\n        toggleValues = _.mapValues(toggleValues,\r\n            (value, key) => newState && key == picked); // eslint-disable-line\r\n\r\n        // if newState is false, we want to reset\r\n        this.props.updateDataFilter(picked, !newState);\r\n\r\n        this.setState({ toggleValues: toggleValues });\r\n    }\r\n\r\n    componentWillMount() {\r\n        let toggles = this.props.toggleNames,\r\n            toggleValues = _.zipObject(toggles,\r\n                toggles.map((name) => name === this.props.picked));\r\n\r\n        this.setState({ toggleValues: toggleValues });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.picked !== nextProps.picked) {\r\n            this.makePick(nextProps.picked, true);\r\n        }\r\n    }\r\n\r\n    _addToggle(name) {\r\n        let key = `toggle-${name}`,\r\n            label = name;\r\n\r\n        if (this.props.capitalize) {\r\n            label = label.toUpperCase();\r\n        }\r\n\r\n        return (\r\n            <Toggle label={label}\r\n                name={name}\r\n                key={key}\r\n                value={this.state.toggleValues[name]}\r\n                onClick={this.makePick.bind(this)} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row col-md-12\">\r\n                {this.props.toggleNames\r\n                    .map(name => this._addToggle(name))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlRow;"]},"metadata":{},"sourceType":"module"}