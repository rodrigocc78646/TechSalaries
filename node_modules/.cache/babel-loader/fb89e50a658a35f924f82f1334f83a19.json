{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\components\\\\Meta\\\\Description.js\";\nimport React, { Component } from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport { mean as d3mean, extent as d3extent, deviation as d3deviation } from 'd3-array';\nimport USStatesMap from './USStatesMap';\n\nclass Description extends Component {\n  allDataForYear(year, data = this.props.allData) {\n    return data.filter(d => d.submit_date.getFullYear() === year);\n  }\n\n  allDataForJobTitle(jobTitle, data = this.props.allData) {\n    return data.filter(d => d.clean_job_title === jobTitle);\n  }\n\n  allDataForUSstate(USstate, data = this.props.allData) {\n    return data.filter(d => d.USstate === USstate);\n  }\n\n  get yearsFragment() {\n    const year = this.props.filteredBy.year;\n    return year === '*' ? \"\" : \"In \".concat(year);\n  }\n\n  get USstateFragment() {\n    const USstate = this.props.filteredBy.USstate;\n    return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\n  }\n\n  get previousYearFragment() {\n    const year = this.props.filteredBy.year;\n    let fragment;\n\n    if (year === '*') {\n      fragment = \"\";\n    } else if (year === 2012) {\n      fragment = \"\";\n    } else {\n      const _this$props$filteredB = this.props.filteredBy,\n            USstate = _this$props$filteredB.USstate,\n            jobTitle = _this$props$filteredB.jobTitle;\n      let lastYear = this.allDataForYear(year - 1);\n\n      if (jobTitle !== '*') {\n        lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n      }\n\n      if (USstate !== '*') {\n        lastYear = this.allDataForUSstate(USstate, lastYear);\n      }\n\n      if (this.props.data.length / lastYear.length > 2) {\n        fragment = \", \" + (this.props.data.length / lastYear.length).toFixed() + \" times more than the year before\";\n      } else {\n        const percent = ((1 - lastYear.length / this.props.data.length) * 100).toFixed();\n        fragment = \", \" + Math.abs(percent) + \"% \" + (percent > 0 ? \"more\" : \"less\") + \" than the year before\";\n      }\n    }\n\n    return fragment;\n  }\n\n  get jobTitleFragment() {\n    const jobTitle = this.props.filteredBy.jobTitle;\n    let fragment;\n\n    if (jobTitle === '*') {\n      fragment = \"H1B work visas\";\n    } else {\n      if (jobTitle === \"other\") {\n        fragment = \"H1B work visas\";\n      } else {\n        fragment = \"H1B work visas for software \".concat(jobTitle, \"s\");\n      }\n    }\n\n    return fragment;\n  }\n\n  get format() {\n    return scaleLinear().domain(d3extent(this.props.data, d => d.base_salary)).tickFormat();\n  }\n\n  render() {\n    const format = this.format,\n          mean = d3mean(this.props.data, d => d.base_salary),\n          deviation = d3deviation(this.props.data, d => d.base_salary);\n    return React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.yearsFragment ? this.yearsFragment : \"Since 2012\", \" the \", this.UStateFragment, \" tech industry \", this.yearsFragment ? \"sponsored\" : \"has sponsored\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, format(this.props.data.length), \" \", this.jobTitleFragment), this.previousYearFragment, \". Most of them paid \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"$\", format(mean - deviation), \" to $\", format(mean + deviation)), \" per year.\");\n  }\n\n}\n\nexport default Description;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\components\\Meta\\Description.js"],"names":["React","Component","scaleLinear","mean","d3mean","extent","d3extent","deviation","d3deviation","USStatesMap","Description","allDataForYear","year","data","props","allData","filter","d","submit_date","getFullYear","allDataForJobTitle","jobTitle","clean_job_title","allDataForUSstate","USstate","yearsFragment","filteredBy","USstateFragment","toUpperCase","previousYearFragment","fragment","lastYear","length","toFixed","percent","Math","abs","jobTitleFragment","format","domain","base_salary","tickFormat","render","UStateFragment"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { mean as d3mean, extent as d3extent, deviation as d3deviation } from 'd3-array';\r\n\r\nimport USStatesMap from './USStatesMap';\r\n\r\nclass Description extends Component {\r\n\r\n    allDataForYear(year, data = this.props.allData) {\r\n        return data.filter(d => d.submit_date.getFullYear() === year);\r\n    }\r\n\r\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\r\n        return data.filter(d => d.clean_job_title === jobTitle);\r\n    }\r\n\r\n    allDataForUSstate(USstate, data = this.props.allData) {\r\n        return data.filter(d => d.USstate === USstate);\r\n    }\r\n\r\n    get yearsFragment() {\r\n        const year = this.props.filteredBy.year;\r\n\r\n        return year === '*' ? \"\" : `In ${year}`;\r\n    }\r\n\r\n    get USstateFragment() {\r\n        const USstate = this.props.filteredBy.USstate;\r\n\r\n        return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\r\n    }\r\n\r\n    get previousYearFragment() {\r\n        const year = this.props.filteredBy.year;\r\n\r\n        let fragment;\r\n\r\n        if (year === '*') {\r\n            fragment = \"\";\r\n        } else if (year === 2012) {\r\n            fragment = \"\";\r\n        } else {\r\n            const { USstate, jobTitle } = this.props.filteredBy;\r\n            let lastYear = this.allDataForYear(year - 1);\r\n\r\n\r\n            if (jobTitle !== '*') {\r\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\r\n            }\r\n\r\n            if (USstate !== '*') {\r\n                lastYear = this.allDataForUSstate(USstate, lastYear);\r\n            }\r\n\r\n            if (this.props.data.length / lastYear.length > 2) {\r\n                fragment = \", \" + (this.props.data.length / lastYear.length).toFixed() + \" times more than the year before\";\r\n            } else {\r\n                const percent = ((1 - lastYear.length / this.props.data.length) * 100).toFixed();\r\n\r\n                fragment = \", \" + Math.abs(percent) + \"% \" + (percent > 0 ? \"more\" : \"less\") + \" than the year before\";\r\n            }\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    get jobTitleFragment() {\r\n        const jobTitle = this.props.filteredBy.jobTitle;\r\n        let fragment;\r\n\r\n        if (jobTitle === '*') {\r\n            fragment = \"H1B work visas\";\r\n        } else {\r\n            if (jobTitle === \"other\") {\r\n                fragment = \"H1B work visas\";\r\n            } else {\r\n                fragment = `H1B work visas for software ${jobTitle}s`;\r\n            }\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    get format() {\r\n        return scaleLinear()\r\n            .domain(d3extent(this.props.data, d => d.base_salary))\r\n            .tickFormat();\r\n    }\r\n\r\n\r\n    render() {\r\n        const format = this.format,\r\n            mean = d3mean(this.props.data, d => d.base_salary),\r\n            deviation = d3deviation(this.props.data, d => d.base_salary);\r\n\r\n        return (\r\n            <p className=\"lead\">\r\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the {this.UStateFragment} tech industry {this.yearsFragment ? \"sponsored\" : \"has sponsored\"} <b>{format(this.props.data.length)} {this.jobTitleFragment}</b>{this.previousYearFragment}. Most of them paid <b>${format(mean - deviation)} to ${format(mean + deviation)}</b> per year.\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Description;"]},"metadata":{},"sourceType":"module"}