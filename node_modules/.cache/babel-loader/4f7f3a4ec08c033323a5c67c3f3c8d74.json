{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nimport './App.css';\nimport Preloader from './components/Preloader';\nimport loadAllData from './DataHandling';\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport { Title, Description, GraphDescription } from './components/Meta';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      techSalaries: [],\n      countyNames: [],\n      medianIncomes: [],\n      filteredBy: {\n        USstate: '*',\n        year: '*',\n        jobTitle: '*'\n      }\n    };\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id];\n    const salaries = techSalariesMap[county.name];\n\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return React.createElement(Preloader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    }\n\n    const filteredSalaries = this.state.techSalaries;\n\n    const filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID');\n\n    const countyValues = this.state.countyNames.map(county => this.countyValue(county, filteredSalariesMap)).filter(d => !_.isNull(d));\n    let zoom = null;\n    return React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Title, {\n      data: filteredSalaries,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Description, {\n      data: filteredSalaries,\n      allData: this.state.techSalaries,\n      medianIncomesByCount: this.state.medianIncomesByCount,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(GraphDescription, {\n      data: filteredSalaries,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"svg\", {\n      width: \"1100\",\n      height: \"500\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(CountyMap, {\n      usTopoJson: this.state.usTopoJson,\n      USstateNames: this.state.USstateNames,\n      values: countyValues,\n      x: 0,\n      y: 0,\n      width: 500,\n      height: 500,\n      zoom: zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Histogram, {\n      bins: 10,\n      width: 500,\n      height: 500,\n      x: \"500\",\n      y: \"10\",\n      data: filteredSalaries,\n      axisMargin: 83,\n      bottomMargin: 5,\n      value: d => d.base_salary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\App.js"],"names":["React","Component","d3","_","Preloader","loadAllData","CountyMap","Histogram","Title","Description","GraphDescription","App","state","techSalaries","countyNames","medianIncomes","filteredBy","USstate","year","jobTitle","countyValue","county","techSalariesMap","medianHousehold","id","salaries","name","median","d","base_salary","countyID","value","medianIncome","componentWillMount","data","setState","render","length","filteredSalaries","filteredSalariesMap","groupBy","countyValues","map","filter","isNull","zoom","medianIncomesByCount","usTopoJson","USstateNames"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport './App.css';\n\nimport Preloader from './components/Preloader';\nimport loadAllData from './DataHandling';\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport {Title, Description, GraphDescription} from './components/Meta';\n\nclass App extends Component {\n  state = {\n    techSalaries: [],\n    countyNames: [],\n    medianIncomes: [],\n    filteredBy: {\n      USstate: '*',\n      year: '*',\n      jobTitle: '*'\n    }\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id];\n    const salaries = techSalariesMap[county.name];\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return (\n        <Preloader />\n      );\n    }\n\n    const filteredSalaries = this.state.techSalaries;\n    const filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID');\n    const countyValues = this.state.countyNames.map(county => this.countyValue(county, filteredSalariesMap)).filter(d => !_.isNull(d));\n\n    let zoom = null;\n\n    return (\n      <div className=\"App container\">\n        <Title data={filteredSalaries} filteredBy={this.state.filteredBy} />\n        <Description data={filteredSalaries}\n                     allData={this.state.techSalaries}\n                     medianIncomesByCount={this.state.medianIncomesByCount}\n                     filteredBy={this.state.filteredBy} />\n        <GraphDescription data={filteredSalaries}\n                          filteredBy={this.state.filteredBy} />\n        <svg width=\"1100\" height=\"500\">\n          <CountyMap usTopoJson={this.state.usTopoJson} \n                     USstateNames={this.state.USstateNames} \n                     values={countyValues} \n                     x={0} \n                     y={0} \n                     width={500} \n                     height={500} \n                     zoom={zoom} />\n          <Histogram bins={10}\n                     width={500}\n                     height={500}\n                     x=\"500\"\n                     y=\"10\"\n                     data={filteredSalaries}\n                     axisMargin={83}\n                     bottomMargin={5}\n                     value={d => d.base_salary} />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}