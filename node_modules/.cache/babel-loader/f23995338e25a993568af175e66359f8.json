{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\components\\\\Meta\\\\Description.js\";\nimport React, { Component } from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport { mean as d3mean, extent as d3extent, deviation as d3deviation } from 'd3-array';\nimport _ from 'lodash';\nimport S from 'string';\nimport USStatesMap from './USStatesMap';\n\nclass Description extends Component {\n  allDataForYear(year, data = this.props.allData) {\n    return data.filter(d => d.submit_date.getFullYear() === year);\n  }\n\n  allDataForJobTitle(jobTitle, data = this.props.allData) {\n    return data.filter(d => d.clean_job_title === jobTitle);\n  }\n\n  allDataForUSstate(USstate, data = this.props.allData) {\n    return data.filter(d => d.USstate === USstate);\n  }\n\n  get yearsFragment() {\n    const year = this.props.filteredBy.year;\n    return year === '*' ? \"\" : \"In \".concat(year);\n  }\n\n  get USstateFragment() {\n    const USstate = this.props.filteredBy.USstate;\n    return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\n  }\n\n  get previousYearFragment() {\n    const year = this.props.filteredBy.year;\n    let fragment;\n\n    if (year === '*') {\n      fragment = \"\";\n    } else if (year === 2012) {\n      fragment = \"\";\n    } else {\n      const _this$props$filteredB = this.props.filteredBy,\n            USstate = _this$props$filteredB.USstate,\n            jobTitle = _this$props$filteredB.jobTitle;\n      let lastYear = this.allDataForYear(year - 1);\n\n      if (jobTitle !== '*') {\n        lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n      }\n\n      if (USstate !== '*') {\n        lastYear = this.allDataForUSstate(USstate, lastYear);\n      }\n\n      if (this.props.data.length / lastYear.length > 2) {\n        fragment = \", \" + (this.props.data.length / lastYear.length).toFixed() + \" times more than the year before\";\n      } else {\n        const percent = ((1 - lastYear.length / this.props.data.length) * 100).toFixed();\n        fragment = \", \" + Math.abs(percent) + \"% \" + (percent > 0 ? \"more\" : \"less\") + \" than the year before\";\n      }\n    }\n\n    return fragment;\n  }\n\n  get jobTitleFragment() {\n    const jobTitle = this.props.filteredBy.jobTitle;\n    let fragment;\n\n    if (jobTitle === '*') {\n      fragment = \"H1B work visas\";\n    } else {\n      if (jobTitle === \"other\") {\n        fragment = \"H1B work visas\";\n      } else {\n        fragment = \"H1B work visas for software \".concat(jobTitle, \"s\");\n      }\n    }\n\n    return fragment;\n  }\n\n  get countyFragment() {\n    const byCounty = _.groupBy(this.props.data, 'countyID'),\n          medians = this.props.medianIncomesByCounty;\n\n    let ordered = _.sortBy(_.keys(byCounty).map(county => byCounty[county]).filter(d => d.length / this.props.data.length > 0.01), items => d3mean(items, d => d.base_salary) - medians[items[0].countyID][0].medianIncome);\n\n    let best = ordered[ordered.length - 1],\n        countyMedian = medians[best[0].countyID][0].medianIncome;\n\n    const byCity = _.groupBy(best, 'city');\n\n    ordered = _.sortBy(_.keys(byCity).map(city => byCity[city]).filter(d => d.length / best.length > 0.01), items => d3mean(items, d => d.base_salary) - countyMedian);\n    best = ordered[ordered.length - 1];\n    const city = S(best[0].city).titleCase().s + \", \".concat(best[0].USstate),\n          mean = d3mean(best, d => d.base_salary);\n    const jobFragment = this.jobTitleFragment.replace(\"H1B work visas for\", \"\").replace(\"H1B work visas\", \"\");\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"The best city \", jobFragment.length ? \"for \".concat(jobFragment, \" on an H1B\") : 'for an H1B', \" \", this.yearFragment ? \"was\" : \"is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, city), \" with an average  salary $\", this.format(mean - countyMedian), \" above the local household median. Median household income is a good proxy for cost of living in an area. \", React.createElement(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Household_income\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"[1]\"), \".\");\n  }\n\n  get format() {\n    return scaleLinear().domain(d3extent(this.props.data, d => d.base_salary)).tickFormat();\n  }\n\n  render() {\n    const format = this.format,\n          mean = d3mean(this.props.data, d => d.base_salary),\n          deviation = d3deviation(this.props.data, d => d.base_salary);\n    return React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.yearsFragment ? this.yearsFragment : \"Since 2012\", \" the \", this.UStateFragment, \" tech industry \", this.yearsFragment ? \"sponsored\" : \"has sponsored\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, format(this.props.data.length), \" \", this.jobTitleFragment), this.previousYearFragment, \". Most of them paid \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"$\", format(mean - deviation), \" to $\", format(mean + deviation)), \" per year. \", this.countyFragment);\n  }\n\n}\n\nexport default Description;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\components\\Meta\\Description.js"],"names":["React","Component","scaleLinear","mean","d3mean","extent","d3extent","deviation","d3deviation","_","S","USStatesMap","Description","allDataForYear","year","data","props","allData","filter","d","submit_date","getFullYear","allDataForJobTitle","jobTitle","clean_job_title","allDataForUSstate","USstate","yearsFragment","filteredBy","USstateFragment","toUpperCase","previousYearFragment","fragment","lastYear","length","toFixed","percent","Math","abs","jobTitleFragment","countyFragment","byCounty","groupBy","medians","medianIncomesByCounty","ordered","sortBy","keys","map","county","items","base_salary","countyID","medianIncome","best","countyMedian","byCity","city","titleCase","s","jobFragment","replace","yearFragment","format","domain","tickFormat","render","UStateFragment"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { mean as d3mean, extent as d3extent, deviation as d3deviation } from 'd3-array';\r\nimport _ from 'lodash';\r\nimport S from 'string';\r\n\r\nimport USStatesMap from './USStatesMap';\r\n\r\nclass Description extends Component {\r\n\r\n    allDataForYear(year, data = this.props.allData) {\r\n        return data.filter(d => d.submit_date.getFullYear() === year);\r\n    }\r\n\r\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\r\n        return data.filter(d => d.clean_job_title === jobTitle);\r\n    }\r\n\r\n    allDataForUSstate(USstate, data = this.props.allData) {\r\n        return data.filter(d => d.USstate === USstate);\r\n    }\r\n\r\n    get yearsFragment() {\r\n        const year = this.props.filteredBy.year;\r\n\r\n        return year === '*' ? \"\" : `In ${year}`;\r\n    }\r\n\r\n    get USstateFragment() {\r\n        const USstate = this.props.filteredBy.USstate;\r\n\r\n        return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\r\n    }\r\n\r\n    get previousYearFragment() {\r\n        const year = this.props.filteredBy.year;\r\n\r\n        let fragment;\r\n\r\n        if (year === '*') {\r\n            fragment = \"\";\r\n        } else if (year === 2012) {\r\n            fragment = \"\";\r\n        } else {\r\n            const { USstate, jobTitle } = this.props.filteredBy;\r\n            let lastYear = this.allDataForYear(year - 1);\r\n\r\n\r\n            if (jobTitle !== '*') {\r\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\r\n            }\r\n\r\n            if (USstate !== '*') {\r\n                lastYear = this.allDataForUSstate(USstate, lastYear);\r\n            }\r\n\r\n            if (this.props.data.length / lastYear.length > 2) {\r\n                fragment = \", \" + (this.props.data.length / lastYear.length).toFixed() + \" times more than the year before\";\r\n            } else {\r\n                const percent = ((1 - lastYear.length / this.props.data.length) * 100).toFixed();\r\n\r\n                fragment = \", \" + Math.abs(percent) + \"% \" + (percent > 0 ? \"more\" : \"less\") + \" than the year before\";\r\n            }\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    get jobTitleFragment() {\r\n        const jobTitle = this.props.filteredBy.jobTitle;\r\n        let fragment;\r\n\r\n        if (jobTitle === '*') {\r\n            fragment = \"H1B work visas\";\r\n        } else {\r\n            if (jobTitle === \"other\") {\r\n                fragment = \"H1B work visas\";\r\n            } else {\r\n                fragment = `H1B work visas for software ${jobTitle}s`;\r\n            }\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    get countyFragment() {\r\n        const byCounty = _.groupBy(this.props.data, 'countyID'),\r\n            medians = this.props.medianIncomesByCounty;\r\n\r\n        let ordered = _.sortBy(\r\n            _.keys(byCounty)\r\n                .map(county => byCounty[county])\r\n                .filter(d => d.length / this.props.data.length > 0.01),\r\n            items => d3mean(items,\r\n                d => d.base_salary) - medians[items[0].countyID][0].medianIncome);\r\n\r\n        let best = ordered[ordered.length - 1],\r\n            countyMedian = medians[best[0].countyID][0].medianIncome;\r\n\r\n        const byCity = _.groupBy(best, 'city');\r\n\r\n        ordered = _.sortBy(_.keys(byCity)\r\n            .map(city => byCity[city])\r\n            .filter(d => d.length / best.length > 0.01),\r\n            items => d3mean(items, d => d.base_salary) - countyMedian);\r\n\r\n        best = ordered[ordered.length - 1];\r\n\r\n        const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\r\n            mean = d3mean(best, d => d.base_salary);\r\n\r\n        const jobFragment = this.jobTitleFragment\r\n            .replace(\"H1B work visas for\", \"\")\r\n            .replace(\"H1B work visas\", \"\");\r\n\r\n        return (\r\n            <span>\r\n                The best city {jobFragment.length ? `for ${jobFragment} on an H1B` : 'for an H1B'} {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average  salary ${this.format(mean - countyMedian)} above the local household median. Median household income is a good proxy for cost of living in an area. <a href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>.\r\n            </span>\r\n        );\r\n    }\r\n\r\n    get format() {\r\n        return scaleLinear()\r\n            .domain(d3extent(this.props.data, d => d.base_salary))\r\n            .tickFormat();\r\n    }\r\n\r\n\r\n    render() {\r\n        const format = this.format,\r\n              mean = d3mean(this.props.data, d => d.base_salary),\r\n              deviation = d3deviation(this.props.data, d => d.base_salary);\r\n\r\n        return (\r\n            <p className=\"lead\">\r\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the {this.UStateFragment} tech industry {this.yearsFragment ? \"sponsored\" : \"has sponsored\"} <b>{format(this.props.data.length)} {this.jobTitleFragment}</b>{this.previousYearFragment}. Most of them paid <b>${format(mean-deviation)} to ${format(mean+deviation)}</b> per year. {this.countyFragment}\r\n            </p>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Description;"]},"metadata":{},"sourceType":"module"}