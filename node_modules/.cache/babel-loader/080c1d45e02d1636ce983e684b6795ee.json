{"ast":null,"code":"import * as d3 from 'd3';\nimport _ from 'lodash';\n\nconst cleanIncomes = d => ({\n  countyName: d['Name'],\n  USstate: d['State'],\n  medianIncome: Number(d['Median Household Income']),\n  lowerBound: Number(d['90% CI Lower Bound']),\n  upperBound: Number(d['90% CI Upper Bound'])\n});\n\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\n\nconst cleanSalary = d => {\n  if (!d['base salary'] || Number(d['base salary'] > 300000)) {\n    return null;\n  }\n\n  return {\n    employer: d.employer,\n    submit_date: dateParse(d['submit date']),\n    start_date: dateParse(d['start date']),\n    case_status: d['case status'],\n    job_title: d['job title'],\n    clean_job_title: d['job title'],\n    base_salary: Number(d['base salary']),\n    city: d['city'],\n    USstate: d['state'],\n    county: d['county'],\n    countyID: d['countyID']\n  };\n};\n\nconst cleanUSStateName = d => ({\n  code: d.code,\n  id: Number(d.id),\n  name: d.name\n});\n\nexport const loadAllData = (callback = _.noop) => {\n  Promise.all([d3.json(\"data/us.json\"), d3.csv(\"data/us-county-names-normalized.csv\"), d3.csv(\"data/county-median-incomes.csv\", cleanIncomes), d3.csv(\"data/h1bs-2012-2016-shortened.csv\", cleanSalary), d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {\n    countyNames = countyNames.map(({\n      id,\n      name\n    }) => ({\n      id: Number(id),\n      name: name\n    }));\n    let meadianIncomesMap = {};\n    medianIncomes.filter(d => _.find(countyNames, {\n      name: d['countyName']\n    })).forEach(d => {\n      d['countyID'] = _.find(countyNames, {\n        name: d['countyName']\n      }).id;\n      medianIncomesMap[d.countyID] = d;\n    });\n    techSalaries = techSalaries.filter(d => !_.isNull(d));\n    callback({\n      usTopoJson: us,\n      countyNames: countyNames,\n      medianIncomes: medianIncomesMap,\n      medianIncomesByCounty: _.groupBy(medianIncomes, 'countyName'),\n      medianIncomesByUSState: _.groupBy(medianIncomes, 'USstate'),\n      techSalaries: techSalaries,\n      USstateNames: USstateNames\n    });\n  });\n};","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\DataHandling.js"],"names":["d3","_","cleanIncomes","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","timeParse","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","loadAllData","callback","noop","Promise","all","json","csv","tsv","then","us","countyNames","medianIncomes","techSalaries","USstateNames","map","meadianIncomesMap","filter","find","forEach","medianIncomesMap","isNull","usTopoJson","medianIncomesByCounty","groupBy","medianIncomesByUSState"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\r\nimport _ from 'lodash';\r\n\r\nconst cleanIncomes = (d) => ({\r\n    countyName: d['Name'],\r\n    USstate: d['State'],\r\n    medianIncome: Number(d['Median Household Income']),\r\n    lowerBound: Number(d['90% CI Lower Bound']),\r\n    upperBound: Number(d['90% CI Upper Bound'])\r\n});\r\n\r\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\r\n\r\nconst cleanSalary = (d) => {\r\n    if (!d['base salary'] || Number(d['base salary'] > 300000)) {\r\n        return null;\r\n    }\r\n\r\n    return {\r\n        employer: d.employer,\r\n        submit_date: dateParse(d['submit date']),\r\n        start_date: dateParse(d['start date']),\r\n        case_status: d['case status'],\r\n        job_title: d['job title'],\r\n        clean_job_title: d['job title'],\r\n        base_salary: Number(d['base salary']),\r\n        city: d['city'],\r\n        USstate: d['state'],\r\n        county: d['county'],\r\n        countyID: d['countyID']\r\n    };\r\n}\r\n\r\nconst cleanUSStateName = (d) => ({\r\n    code: d.code,\r\n    id: Number(d.id),\r\n    name: d.name\r\n});\r\n\r\nexport const loadAllData = (callback = _.noop) => {\r\n    Promise.all([\r\n        d3.json(\"data/us.json\"),\r\n        d3.csv(\"data/us-county-names-normalized.csv\"),\r\n        d3.csv(\"data/county-median-incomes.csv\", cleanIncomes),\r\n        d3.csv(\"data/h1bs-2012-2016-shortened.csv\", cleanSalary),\r\n        d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)\r\n    ]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {\r\n        countyNames = countyNames.map(({id, name}) => ({id: Number(id), name: name}));\r\n        let meadianIncomesMap = {};\r\n        medianIncomes.filter(d => _.find(countyNames, {name: d['countyName']}))\r\n                     .forEach((d) => {\r\n                         d['countyID'] = _.find(countyNames, {name: d['countyName']}).id;\r\n                         medianIncomesMap[d.countyID] = d;\r\n                     });\r\n        techSalaries = techSalaries.filter(d => !_.isNull(d));\r\n        callback({\r\n            usTopoJson: us,\r\n            countyNames: countyNames,\r\n            medianIncomes: medianIncomesMap,\r\n            medianIncomesByCounty: _.groupBy(medianIncomes, 'countyName'),\r\n            medianIncomesByUSState: _.groupBy(medianIncomes, 'USstate'),\r\n            techSalaries: techSalaries,\r\n            USstateNames: USstateNames\r\n        });\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}