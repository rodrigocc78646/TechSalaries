{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\components\\\\CountyMap\\\\CountyMap.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport _ from 'lodash';\nimport County from './County';\n\nclass CountyMap extends Component {\n  constructor(props) {\n    super(props);\n    this.projection = d3.geoAlbersUsa().scale(1280);\n    this.geoPath = d3.geoPath().projection(this.projection);\n    this.quantize = d3.scaleQuantize().range(d3.range(9));\n    this.updateD3(props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.updateD3(newProps);\n  }\n\n  updateD3(props) {\n    this.projection.translate([props.width / 2, props.height / 2]).scale(props.width * 1.3);\n\n    if (props.zoom && props.usTopoJson) {\n      const us = props.usTopoJson;\n      const statePaths = topojson.feature(us, us.objects.states).features;\n\n      const id = _.find(props.USstateNames, {\n        code: props.zoom\n      }).id;\n\n      this.projection.scale(props.width * 4.5);\n      const centroid = this.geoPath.centroid(_.find(statePaths, {\n        id: id\n      }));\n      const translate = this.projection.translate();\n      this.projection.translate([translate[0] - centroid[0] + props.width / 2, translate[1] - centroid[1] + props.height / 2]);\n    }\n\n    if (props.values) {\n      this.quantize.domain([d3.quantile(props.values, 0.15, d => d.value), d3.quantile(props.values, 0.85, d => d.value)]);\n    }\n  }\n\n  render() {\n    if (!this.props.usTopoJson) {\n      return null;\n    } else {\n      const us = this.props.usTopoJson;\n      const statesMesh = topojson.mesh(us, us.objects.states, (a, b) => a !== b);\n      const counties = topojson.feature(us, us.objects.counties).features;\n\n      const countyValueMap = _.fromPairs(this.props.values.map(d => [d.countyID, d.value]));\n\n      return React.createElement(\"g\", {\n        transform: \"translate(\".concat(this.props.x, \", \").concat(this.props.y, \")\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, counties.map(feature => React.createElement(County, {\n        geoPath: this.geoPath,\n        feature: feature,\n        zoom: this.props.zoom,\n        key: feature.id,\n        quantize: this.quantize,\n        value: countyValueMap[feature.id],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(\"path\", {\n        d: this.geoPath(statesMesh),\n        style: {\n          fill: 'none',\n          stroke: '#fff',\n          strokeLinejoin: 'round'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default CountyMap;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\components\\CountyMap\\CountyMap.js"],"names":["React","Component","d3","topojson","_","County","CountyMap","constructor","props","projection","geoAlbersUsa","scale","geoPath","quantize","scaleQuantize","range","updateD3","componentWillReceiveProps","newProps","translate","width","height","zoom","usTopoJson","us","statePaths","feature","objects","states","features","id","find","USstateNames","code","centroid","values","domain","quantile","d","value","render","statesMesh","mesh","a","b","counties","countyValueMap","fromPairs","map","countyID","x","y","fill","stroke","strokeLinejoin"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson';\r\nimport _ from 'lodash';\r\n\r\nimport County from './County';\r\n\r\nclass CountyMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.projection = d3.geoAlbersUsa().scale(1280);\r\n        this.geoPath = d3.geoPath().projection(this.projection);\r\n        this.quantize = d3.scaleQuantize().range(d3.range(9));\r\n        this.updateD3(props);\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        this.updateD3(newProps);\r\n    }\r\n\r\n    updateD3(props) {\r\n        this.projection\r\n            .translate([props.width/2, props.height/2])\r\n            .scale(props.width*1.3);\r\n\r\n        if (props.zoom && props.usTopoJson) {\r\n            const us = props.usTopoJson;\r\n            const statePaths = topojson.feature(us, us.objects.states).features;\r\n            const id = _.find(props.USstateNames, {code: props.zoom}).id;\r\n\r\n            this.projection.scale(props.width*4.5);\r\n\r\n            const centroid = this.geoPath.centroid(_.find(statePaths, {id: id}));\r\n            const translate = this.projection.translate();\r\n\r\n            this.projection.translate([\r\n                translate[0] - centroid[0] + props.width/2,\r\n                translate[1] - centroid[1] + props.height/2\r\n            ]);\r\n        }\r\n\r\n        if (props.values) {\r\n            this.quantize.domain([\r\n                d3.quantile(props.values, 0.15, d => d.value),\r\n                d3.quantile(props.values, 0.85, d => d.value)\r\n            ]);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.usTopoJson) {\r\n            return null;\r\n        } \r\n        else {\r\n            const us = this.props.usTopoJson;\r\n            const statesMesh = topojson.mesh(us, us.objects.states, (a,b) => a!==b);\r\n            const counties = topojson.feature(us, us.objects.counties).features;\r\n            const countyValueMap = _.fromPairs(this.props.values.map(d => [d.countyID, d.value]));\r\n\r\n            return (\r\n                <g transform={`translate(${this.props.x}, ${this.props.y})`}>\r\n                    {counties.map((feature) => (\r\n                        <County geoPath={this.geoPath}\r\n                                feature={feature}\r\n                                zoom={this.props.zoom}\r\n                                key={feature.id}\r\n                                quantize={this.quantize}\r\n                                value={countyValueMap[feature.id]} />\r\n                    ))}\r\n                    <path d={this.geoPath(statesMesh)}\r\n                          style={{fill:'none', stroke:'#fff', strokeLinejoin:'round'}}/>\r\n                </g>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default CountyMap;"]},"metadata":{},"sourceType":"module"}