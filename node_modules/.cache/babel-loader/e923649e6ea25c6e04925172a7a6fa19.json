{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nimport './App.css';\nimport Preloader from './components/Preloader';\nimport loadAllData from './DataHandling';\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport { Title, Description, GraphDescription } from './components/Meta';\nimport MedianLine from './components/MedianLine';\nimport Controls from './components/Controls';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      techSalaries: [],\n      countyNames: [],\n      medianIncomes: [],\n      salariesFilter: () => true,\n      filteredBy: {\n        USstate: '*',\n        year: '*',\n        jobTitle: '*'\n      }\n    };\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id];\n    const salaries = techSalariesMap[county.name];\n\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const _this$state = this.state,\n          techSalaries = _this$state.techSalaries,\n          filteredBy = _this$state.filteredBy;\n    const changedSalaries = (techSalaries && techSalaries.length) !== (nextState.techSalaries && nextState.techSalaries.length);\n    const changedFilters = Object.keys(filteredBy).some(k => filteredBy[k] !== nextState.filteredBy[k]);\n    return changedSalaries || changedFilters;\n  }\n\n  updateDataFilter(filter, filteredBy) {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    });\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return React.createElement(Preloader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    }\n\n    const filteredSalaries = this.state.techSalaries.filter(this.state.salariesFilter);\n\n    const filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID');\n\n    const countyValues = this.state.countyNames.map(county => this.countyValue(county, filteredSalariesMap)).filter(d => !_.isNull(d));\n    let zoom = null;\n    let medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome;\n\n    if (this.state.filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(this.state.medianIncomesByUSState[zoom], d => d.medianIncome);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Title, {\n      data: filteredSalaries,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Description, {\n      data: filteredSalaries,\n      allData: this.state.techSalaries,\n      medianIncomesByCount: this.state.medianIncomesByCount,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(GraphDescription, {\n      data: filteredSalaries,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"svg\", {\n      width: \"1100\",\n      height: \"500\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(CountyMap, {\n      usTopoJson: this.state.usTopoJson,\n      USstateNames: this.state.USstateNames,\n      values: countyValues,\n      x: 0,\n      y: 0,\n      width: 500,\n      height: 500,\n      zoom: zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"rect\", {\n      x: \"500\",\n      y: \"0\",\n      width: \"600\",\n      height: \"500\",\n      style: {\n        fill: 'green',\n        fillOpacity: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Histogram, {\n      bins: 10,\n      width: 500,\n      height: 500,\n      x: \"500\",\n      y: \"10\",\n      data: filteredSalaries,\n      axisMargin: 83,\n      bottomMargin: 5,\n      value: d => d.base_salary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(MedianLine, {\n      data: filteredSalaries,\n      x: 500,\n      y: 10,\n      width: 600,\n      height: 500,\n      bottomMargin: 5,\n      median: medianHousehold,\n      value: d => d.base_salary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"500\",\n      heigth: \"500\",\n      style: {\n        fill: 'green',\n        fillOpacity: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(Controls, {\n      data: this.state.techSalaries,\n      updateDataFilter: this.updateDataFilter.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\App.js"],"names":["React","Component","d3","_","Preloader","loadAllData","CountyMap","Histogram","Title","Description","GraphDescription","MedianLine","Controls","App","state","techSalaries","countyNames","medianIncomes","salariesFilter","filteredBy","USstate","year","jobTitle","countyValue","county","techSalariesMap","medianHousehold","id","salaries","name","median","d","base_salary","countyID","value","medianIncome","componentWillMount","data","setState","shouldComponentUpdate","nextProps","nextState","changedSalaries","length","changedFilters","Object","keys","some","k","updateDataFilter","filter","render","filteredSalaries","filteredSalariesMap","groupBy","countyValues","map","isNull","zoom","medianIncomesByUSState","mean","medianIncomesByCount","usTopoJson","USstateNames","fill","fillOpacity","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport './App.css';\n\nimport Preloader from './components/Preloader';\nimport loadAllData from './DataHandling';\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport { Title, Description, GraphDescription } from './components/Meta';\nimport MedianLine from './components/MedianLine';\nimport Controls from './components/Controls';\n\nclass App extends Component {\n  state = {\n    techSalaries: [],\n    countyNames: [],\n    medianIncomes: [],\n    salariesFilter: () => true,\n    filteredBy: {\n      USstate: '*',\n      year: '*',\n      jobTitle: '*'\n    }\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id];\n    const salaries = techSalariesMap[county.name];\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { techSalaries, filteredBy } = this.state;\n\n    const changedSalaries = (techSalaries && techSalaries.length) !== (nextState.techSalaries && nextState.techSalaries.length);\n\n    const changedFilters = Object.keys(filteredBy).some(\n      k => filteredBy[k] !== nextState.filteredBy[k]\n    );\n\n    return changedSalaries || changedFilters;\n  }\n\n  updateDataFilter(filter, filteredBy) {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    });\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return (\n        <Preloader />\n      );\n    }\n\n    const filteredSalaries = this.state.techSalaries.filter(this.state.salariesFilter);\n    const filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID');\n    const countyValues = this.state.countyNames.map(county => this.countyValue(county, filteredSalariesMap)).filter(d => !_.isNull(d));\n\n    let zoom = null;\n    let medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome;\n    if (this.state.filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(this.state.medianIncomesByUSState[zoom], d => d.medianIncome);\n    }\n\n    return (\n      <div className=\"App container\">\n        <Title data={filteredSalaries} filteredBy={this.state.filteredBy} />\n        <Description data={filteredSalaries}\n          allData={this.state.techSalaries}\n          medianIncomesByCount={this.state.medianIncomesByCount}\n          filteredBy={this.state.filteredBy} />\n        <GraphDescription data={filteredSalaries}\n          filteredBy={this.state.filteredBy} />\n        <svg width=\"1100\" height=\"500\">\n          <CountyMap usTopoJson={this.state.usTopoJson}\n            USstateNames={this.state.USstateNames}\n            values={countyValues}\n            x={0}\n            y={0}\n            width={500}\n            height={500}\n            zoom={zoom} />\n          <rect x=\"500\" y=\"0\" width=\"600\" height=\"500\" style={{ fill: 'green', fillOpacity:1}} />\n          <Histogram bins={10}\n            width={500}\n            height={500}\n            x=\"500\"\n            y=\"10\"\n            data={filteredSalaries}\n            axisMargin={83}\n            bottomMargin={5}\n            value={d => d.base_salary} />\n          <MedianLine data={filteredSalaries}\n            x={500}\n            y={10}\n            width={600}\n            height={500}\n            bottomMargin={5}\n            median={medianHousehold}\n            value={d => d.base_salary} />\n        </svg>\n        <svg width=\"500\" height=\"500\">\n          <rect x=\"0\" y=\"0\" width=\"500\" heigth=\"500\" style={{ fill: 'green', fillOpacity:1}} />\n        </svg>\n        <Controls data={this.state.techSalaries}\n          updateDataFilter={this.updateDataFilter.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}