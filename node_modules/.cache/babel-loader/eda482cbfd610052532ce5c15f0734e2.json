{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodrigo.carvalho\\\\Desktop\\\\Websites\\\\react-d3js-example\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nimport './App.css';\nimport Preloader from './components/Preloader';\nimport loadAllData from './DataHandling';\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport { Title, Description, GraphDescription } from './components/Meta';\nimport MedianLine from './components/MedianLine';\nimport Controls from './components/Controls';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      techSalaries: [],\n      countyNames: [],\n      medianIncomes: [],\n      salariesFilter: () => true,\n      filteredBy: {\n        USstate: '*',\n        year: '*',\n        jobTitle: '*'\n      }\n    };\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id];\n    const salaries = techSalariesMap[county.name];\n\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  updateDataFilter(filter, filteredBy) {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    });\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return React.createElement(Preloader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    }\n\n    const filteredSalaries = this.state.techSalaries.filter(this.state.salariesFilter);\n\n    const filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID');\n\n    const countyValues = this.state.countyNames.map(county => this.countyValue(county, filteredSalariesMap)).filter(d => !_.isNull(d));\n    let zoom = null;\n    let medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome;\n\n    if (this.state.filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(this.state.medianIncomesByUSState[zoom], d => d.medianIncome);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Title, {\n      data: filteredSalaries,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Description, {\n      data: filteredSalaries,\n      allData: this.state.techSalaries,\n      medianIncomesByCount: this.state.medianIncomesByCount,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(GraphDescription, {\n      data: filteredSalaries,\n      filteredBy: this.state.filteredBy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"svg\", {\n      width: \"1100\",\n      height: \"500\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(CountyMap, {\n      usTopoJson: this.state.usTopoJson,\n      USstateNames: this.state.USstateNames,\n      values: countyValues,\n      x: 0,\n      y: 0,\n      width: 500,\n      height: 500,\n      zoom: zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"rect\", {\n      x: \"500\",\n      y: \"0\",\n      width: \"600\",\n      heigth: \"500\",\n      style: {\n        fill: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Histogram, {\n      bins: 10,\n      width: 500,\n      height: 500,\n      x: \"500\",\n      y: \"10\",\n      data: filteredSalaries,\n      axisMargin: 83,\n      bottomMargin: 5,\n      value: d => d.base_salary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(MedianLine, {\n      data: filteredSalaries,\n      x: 500,\n      y: 10,\n      width: 600,\n      height: 500,\n      bottomMargin: 5,\n      median: medianHousehold,\n      value: d => d.base_salary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(Controls, {\n      data: this.state.techSalaries,\n      updateDataFilter: this.updateDataFilter.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\rodrigo.carvalho\\Desktop\\Websites\\react-d3js-example\\src\\App.js"],"names":["React","Component","d3","_","Preloader","loadAllData","CountyMap","Histogram","Title","Description","GraphDescription","MedianLine","Controls","App","state","techSalaries","countyNames","medianIncomes","salariesFilter","filteredBy","USstate","year","jobTitle","countyValue","county","techSalariesMap","medianHousehold","id","salaries","name","median","d","base_salary","countyID","value","medianIncome","componentWillMount","data","setState","updateDataFilter","filter","render","length","filteredSalaries","filteredSalariesMap","groupBy","countyValues","map","isNull","zoom","medianIncomesByUSState","mean","medianIncomesByCount","usTopoJson","USstateNames","fill","bind"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport './App.css';\n\nimport Preloader from './components/Preloader';\nimport loadAllData from './DataHandling';\nimport CountyMap from './components/CountyMap';\nimport Histogram from './components/Histogram';\nimport {Title, Description, GraphDescription} from './components/Meta';\nimport MedianLine from './components/MedianLine';\nimport Controls from './components/Controls';\n\nclass App extends Component {\n  state = {\n    techSalaries: [],\n    countyNames: [],\n    medianIncomes: [],\n    salariesFilter: () => true,\n    filteredBy: {\n      USstate: '*',\n      year: '*',\n      jobTitle: '*'\n    }\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id];\n    const salaries = techSalariesMap[county.name];\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  updateDataFilter(filter, filteredBy) {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    });\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return (\n        <Preloader />\n      );\n    }\n\n    const filteredSalaries = this.state.techSalaries.filter(this.state.salariesFilter);\n    const filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID');\n    const countyValues = this.state.countyNames.map(county => this.countyValue(county, filteredSalariesMap)).filter(d => !_.isNull(d));\n\n    let zoom = null;\n    let medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome;\n    if (this.state.filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(this.state.medianIncomesByUSState[zoom], d => d.medianIncome);\n    }\n\n    return (\n      <div className=\"App container\">\n        <Title data={filteredSalaries} filteredBy={this.state.filteredBy} />\n        <Description data={filteredSalaries}\n                     allData={this.state.techSalaries}\n                     medianIncomesByCount={this.state.medianIncomesByCount}\n                     filteredBy={this.state.filteredBy} />\n        <GraphDescription data={filteredSalaries}\n                          filteredBy={this.state.filteredBy} />\n        <svg width=\"1100\" height=\"500\">\n          <CountyMap usTopoJson={this.state.usTopoJson} \n                     USstateNames={this.state.USstateNames} \n                     values={countyValues} \n                     x={0} \n                     y={0} \n                     width={500} \n                     height={500} \n                     zoom={zoom} />\n          <rect x=\"500\" y=\"0\" width=\"600\" heigth=\"500\" style={{fill: 'white'}} />\n          <Histogram bins={10}\n                     width={500}\n                     height={500}\n                     x=\"500\"\n                     y=\"10\"\n                     data={filteredSalaries}\n                     axisMargin={83}\n                     bottomMargin={5}\n                     value={d => d.base_salary} />\n          <MedianLine data={filteredSalaries}\n                      x={500}\n                      y={10}\n                      width={600}\n                      height={500}\n                      bottomMargin={5}\n                      median={medianHousehold}\n                      value={d => d.base_salary} />\n        </svg>\n        <Controls data={this.state.techSalaries}\n                  updateDataFilter={this.updateDataFilter.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}